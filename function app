// Azure Function: redirects an employee to a SaaS app login page
// with their UPN pre-filled (login_hint).

const { Client } = require("@microsoft/microsoft-graph-client");
require("isomorphic-fetch");
const { DefaultAzureCredential } = require("@azure/identity");

// Map app names → login URL builders
const APP_LOGIN_URLS = {
  Box:   user => `https://yourorg.account.box.com/login?login_hint=${encodeURIComponent(user.mail || user.userPrincipalName)}`,
  Gmail: user => `https://accounts.google.com/AccountChooser?Email=${encodeURIComponent(user.mail || user.userPrincipalName)}`,
  // Add extra apps here…
};

module.exports = async function (context, req) {
  const emp = req.query.employeeId || (req.body && req.body.employeeId);
  if (!emp) {
    context.res = { status: 400, body: { message: "Please supply employeeId" } };
    return;
  }

  const credential = new DefaultAzureCredential();
  const client = Client.initWithMiddleware({
    authProvider: {
      getAccessToken: async () =>
        (await credential.getToken("https://graph.microsoft.com/.default")).token,
    },
  });

  try {
    const graph = await client
      .api("/users")
      .filter(`employeeNumber eq '${emp}'`)
      .select("id,displayName,mail,userPrincipalName")
      .get();

    if (!graph.value?.length) {
      context.res = { status: 404, body: { message: "Employee not found" } };
      return;
    }

    const user = graph.value[0];
    const target = (req.query.app || "Box").trim();
    if (!APP_LOGIN_URLS[target]) {
      context.res = { status: 400, body: { message: `Unknown app "${target}"` } };
      return;
    }

    context.res = { status: 302, headers: { Location: APP_LOGIN_URLS[target](user) } };
  } catch (err) {
    context.log.error(err);
    context.res = { status: 500, body: { message: "Unhandled error" } };
  }
};
